bhq = read.csv("~/Documents/Brain HQ Data.csv")
bhq = read.csv("~/Desktop/Brain HQ Data.csv")
View(bhq)
source("brain hq name shit.R")
source("~/Desktop/brain hq name shit.R")
source("~/Desktop/brain hq name shit.R")
source("~/Desktop/brain hq name shit.R")
colnames(bhq)
names(bhq)
write.csv(bhq, "~/Documents/Brain HQ Data2.csv", row.names = FALSE)
source("~/Desktop/brain hq name shit.R")
source("~/Desktop/brain hq name shit.R")
ls("package:dplyr")
library(dplyr)
getwd()
setwd("/Users/arnavamit/Desktop/ampevol")
getwd()
# Load the tidyverse for convenience
library(tidyverse)
# Read your fixed CSV
df <- read_csv("data/master_evolution_rescored_v3_fixed.csv")
# 1. Check structure
glimpse(df)
# 2. Count NAs by column
sapply(df, function(x) sum(is.na(x)))
# 3. Confirm column count consistency
ncol(df)  # Should return 15
length(unique(sapply(df, length)))  # Should return 1 if all rows are same length
View(df)
head(df)
library(readr)
library(dplyr)
library(stringr)
# Constants
expected_cols <- c(
"Peptide", "AMP_Score", "Toxicity_Score", "Stability_Score", "Fitness_Score",
"Quality_Tag", "Generation", "Timestamp", "Solubility_Score", "Aggregation_Risk",
"Solubility_Tag", "Aggregation_Tag", "Isoelectric_Point", "Boman_Index", "Fitness_Version"
)
# Read raw lines
raw_lines <- read_lines("data/master_evolution_rescored_v3.csv")
# Extract header
header <- raw_lines[1]
data_lines <- raw_lines[-1]
# Function to safely split line
split_safe <- function(line) {
parts <- str_split(line, ",")[[1]]
len <- length(parts)
# Fix short rows
if (len < 15) {
parts <- c(parts, rep(NA, 15 - len))
}
# Fix long rows (merge last fields into last column)
if (len > 15) {
parts <- c(parts[1:14], paste(parts[15:length(parts)], collapse = ""))
}
return(parts)
}
# Split all rows safely
fixed_rows <- lapply(data_lines, split_safe)
df_fixed <- as_tibble(do.call(rbind, fixed_rows))
colnames(df_fixed) <- expected_cols
# Type casting (convert as needed)
df_fixed <- df_fixed %>%
mutate(across(c(AMP_Score, Toxicity_Score, Stability_Score, Fitness_Score,
Generation, Solubility_Score, Aggregation_Risk,
Isoelectric_Point, Boman_Index), as.numeric)) %>%
mutate(Timestamp = as.character(Timestamp))
# Optional: Fill NAs in Aggregation_Tag
df_fixed <- df_fixed %>%
mutate(
Aggregation_Tag = ifelse(is.na(Aggregation_Tag),
ifelse(Aggregation_Risk > 0.5, "ðŸ”´ Risky", "âœ… Safe"),
Aggregation_Tag)
)
# âœ… Save clean file
write_csv(df_fixed, "data/master_evolution_rescored_v3_clean.csv")
cat("âœ… Fixed and saved to: data/master_evolution_rescored_v3_clean.csv\n")
View(df_fixed)
ncol(df_fixed)  # Should be 15
nrow(df_fixed)  # Should be 1609010
sum(!complete.cases(df_fixed))  # Should be 0 or expected few in 'Aggregation_Risk' only
all(colnames(df_fixed) == expected_cols)  # Should be TRUE
library(readr)
library(dplyr)
library(stringr)
expected_cols <- c(
"Peptide", "AMP_Score", "Toxicity_Score", "Stability_Score", "Fitness_Score",
"Quality_Tag", "Generation", "Timestamp", "Solubility_Score", "Aggregation_Risk",
"Solubility_Tag", "Aggregation_Tag", "Isoelectric_Point", "Boman_Index", "Fitness_Version"
)
raw_lines <- read_lines("data/master_evolution_rescored_v3.csv")
header <- raw_lines[1]
data_lines <- raw_lines[-1]
# Split rows safely
split_safe <- function(line) {
parts <- str_split(line, ",")[[1]]
len <- length(parts)
if (len < 15) {
parts <- c(parts, rep(NA, 15 - len))
} else if (len > 15) {
parts <- c(parts[1:14], paste(parts[15:len], collapse = ""))
}
return(parts)
}
# Reconstruct cleaned DataFrame
fixed_rows <- lapply(data_lines, split_safe)
df_fixed <- as_tibble(do.call(rbind, fixed_rows))
colnames(df_fixed) <- expected_cols
# Recast types
df_fixed <- df_fixed %>%
mutate(across(c(AMP_Score, Toxicity_Score, Stability_Score, Fitness_Score,
Generation, Solubility_Score, Aggregation_Risk,
Isoelectric_Point, Boman_Index), as.numeric)) %>%
mutate(Timestamp = as.character(Timestamp))
# Fix aggregation tag if needed
df_fixed <- df_fixed %>%
mutate(
Aggregation_Tag = ifelse(is.na(Aggregation_Tag),
ifelse(Aggregation_Risk > 0.5, "ðŸ”´ Risky", "âœ… Safe"),
Aggregation_Tag)
)
write_csv(df_fixed, "data/master_evolution_rescored_v3_clean.csv")
cat("âœ… Fixed and saved to: data/master_evolution_rescored_v3_clean.csv\n")
df <- read_csv("data/master_evolution_rescored_v3_clean.csv")
df <- read_csv("data/master_evolution_rescored_v3_clean.csv")
glimpse(df)
sum(!complete.cases(df))
dfGOOD <- read_csv("data/master_evolution_rescored_v3_clean.csv")
View(dfGOOD)
library(readr)
library(dplyr)
library(stringr)
# Step 1: Load the file
df <- read_csv("data/master_evolution_history.csv", show_col_types = FALSE)
# Step 2: Define a regex pattern for timestamps (e.g., "2025-04-30")
timestamp_pattern <- "^\\d{4}-\\d{2}-\\d{2}"
# Step 3: Identify and remove corrupted rows
cleaned_df <- df %>%
filter(!str_detect(Aggregation_Tag, timestamp_pattern))
# Step 4: Save cleaned data
write_csv(cleaned_df, "data/master_evolution_history_clean.csv")
cat("âœ… Cleaned and saved to: data/master_evolution_history_clean.csv\n")
# See how many rows were removed
n_removed <- nrow(df) - nrow(cleaned_df)
cat("ðŸ§¹ Rows removed due to timestamp corruption in Aggregation_Tag:", n_removed, "\n")
View(cleaned_df)
library(tidyverse)
# Load clean master CSV
df <- read_csv("data/master_evolution_historyCUT.csv", show_col_types = FALSE)
# Function: Net charge
net_charge <- function(seq) {
pos <- str_count(seq, "[KRH]")
neg <- str_count(seq, "[DE]")
return(pos - neg)
}
# Function: Hydrophobicity
hydrophobicity <- function(seq) {
hydros <- str_count(seq, "[AILMVFWY]")
return(hydros / nchar(seq))
}
# Function: Fitness scoring
calc_fitness <- function(amp, tox, stab, charge, hydro) {
fitness <- pmin(1.0, (amp ^ 1.2) * ((1 - tox) ^ 2) * (stab ^ 1.0))
# Charge bonus/penalty
if (charge >= 2 && charge <= 8) fitness <- fitness * 1.03
else if (charge < 0 || charge > 10) fitness <- fitness * 0.95
# Hydrophobicity bonus/penalty
if (hydro >= 0.25 && hydro <= 0.55) fitness <- fitness * 1.02
else if (hydro < 0.15 || hydro > 0.7) fitness <- fitness * 0.95
return(fitness)
}
# Compute net charge and hydrophobicity
df <- df %>%
mutate(
Net_Charge = map_dbl(Peptide, net_charge),
Hydrophobicity = map_dbl(Peptide, hydrophobicity),
Fitness_Score = mapply(calc_fitness, AMP_Score, Toxicity_Score, Stability_Score, Net_Charge, Hydrophobicity)
)
# Fix aggregation tag
df <- df %>%
mutate(
Aggregation_Tag = ifelse(is.na(Aggregation_Tag),
ifelse(Aggregation_Risk > 0.5, "ðŸ”´ Risky", "âœ… Safe"),
Aggregation_Tag)
)
# Drop Fitness_Version and any other redundant columns if they exist
df <- df %>%
select(-any_of(c("Fitness_Version")))
# Save cleaned, rescored DataFrame
write_csv(df, "data/master_evolution_history_clean.csv")
cat("âœ… Fitness recalculated and saved to: data/master_evolution_history_clean.csv\n")
